#+TITLE: Hoovy Home

* Overview
** DeveloperProjects
|          |                             |                        |
|----------+-----------------------------+------------------------|
| Hoovy    | Editor Tools and Web Server | Emacs Lisp/Common Lisp |
| Nova     | Local game engine client    | Ocaml/JavaScript       |
| Valhalla | Multiplayer game server     | Prolog/Erlang          |
|          |                             |                        |

** UserProjects
|              |                       |   |
|--------------+-----------------------+---|
| Gamelike     | Roguelike RPG game    |   |
| Novapilot    | Shmup shooter game    |   |
| Monsterpiece | running platform game |   |

 
* Init
#+BEGIN_SRC emacs-lisp
(defgroup hoovy nil
  "Hoovy Customization Group"
  :link '(custom-manual "(hoovy)Top"))

(defcustom hoovy-root "~/hoovy"
  "Root Path"
  :type 'directory
  :group 'hoovy)

(defcustom hoovy-apps
  '(("Krita" . "krita")
    ("Hexchat" . "hexchat")
    ("DOOM (Zandronum)" . "~/Downloads/zandronum")
    ("OpenToonz" . "opentoonz")
    ("Firefox" . "/opt/firefox/firefox"))
  "List of Applications"
  :type '(alist :key-type string :value-type file)
  :group 'hoovy)

#+END_SRC

* Start Page
#+BEGIN_SRC emacs-lisp
(defun hoovy-spawn-app (name file)
  (let ((buf (concat "*" name "*")))
    (async-shell-command file buf buf)))

(require 'widget)
(eval-when-compile (require 'wid-edit))

(defun hoovy-all-apps ()
  "add earmuffs to hoovy-apps"
  (mapcar (lambda (x) `(,(concat "*" (car x) "*") . ,(cdr x)))
	   hoovy-apps))

;;
;; TODO: do initial-buffer-choice setup 
;;
(defun hoovy-welcome ()
  "Hoovy Welcome Page"
  (interactive)
  (switch-to-buffer "Hoovy")
  (kill-all-local-variables)
  ;;(make-local-variable 'asdfasdf)
  (let ((inhibit-read-only t))
    (erase-buffer))
  (remove-overlays)
  (widget-insert "Welcome to Hoovy Studio\n\n")
  (dolist (a (hoovy-all-apps))
    (widget-create 'push-button
		   :notify (lambda (&rest ignore)
			     (async-shell-command (cdr a)
						  (car a) (car a)))
		   (car a)))
  (use-local-map widget-keymap)
  (widget-setup))
#+END_SRC

[[elisp:(hoovy-spawn-app "Krita" "~/Downloads/krita-3.3.1-x86_64.appimage")][Krita]]
[[elisp:(hoovy-spawn-app "OpenToolz" "opentoolz")][OpenToolz]]
[[elisp:(hoovy-spawn-app "Blender" "~/Downloads/blender-2.78c-linux-glibc219-x86_64/blender")][Blender]]


* Org Mode
#+BEGIN_SRC emacs-lisp

(defun hoovy-www () (concat hoovy-root "/www/"))
(setq org-default-notes-file (concat hoovy-root "/notes.org"))

(define-key global-map (kbd "C-c c") 'org-capture)

;; (defun hv-make-notes (&optional name)
;;   `(,(concat name "-notes")
;;    :base-directory ,(concat hv-root "/" name "/org")
;;    :base-extension "org"
;;    :publishing-function org-publish-org-to-html
;;    :publishing-directory ,(concat hv-www "/dev/" name)
;;    :auto-sitemap t
;;    :sitemap-title "/Site Map/"
;;    :sitemap-alphabetically nil
;;    :recursive t
;;    :style-include-default t
;;    :headline-levels 4
;;    :auto-preamble t))

;; (defun hv-make-static (&optional name)
;;   `(,(concat name "-static")
;;     :base-directory ,(concat hv-root "/" name "/org")
;;     :base-extension "css\\|js\\|png\\|gif\\|pdf\\|mp3\\|ogg\\|svg"
;;     :publishing-function org-publish-attachment
;;     :publishing-directory ,(concat hv-www "/dev/" name)
;;     :recursive t))

;; (setq org-capture-templates
;;       '(("t" "Todo" entry (file+headline "" "Tasks")
;;          "* TODO %?\n  %i\n  %a")
;;         ("j" "Journal" entry (file+datetree "")
;;          "* %?\nEntered on %U\n  %i\n  %a")))

(setq org-publish-project-alist
      `(("hoovy"
		 :components ("hoovy-org" "hoovy-art" "hoovy-code"))
		("hoovy-org"
		 :auto-sitemap t
		 :base-directory ,hoovy-root
		 :base-extension "org"
		 :publishing-directory ,(hoovy-www)
		 :publishing-function org-html-publish-to-html
		 :recursive t
		 :html-head "<link rel='stylesheet' href='style.css' type='text/css'/>"
		 :html-head-extra ""
		 :html-preamble t
		 :components ())
		("hoovy-art"
		 :base-directory ,(concat hoovy-root "/images/")
		 :base-extension "jpg\\|gif\\|png\\|svg"
		 :publishing-directory ,(hoovy-www)
		 :publishing-function org-publish-attachment)
		("hoovy-code"
		 :base-directory ,(concat hoovy-root "/apps/")
		 :base-extension "css\\|el\\|js"
		 :publishing-directory ,(hoovy-www)
		 :publishing-function org-publish-attachment)))

(org-display-inline-images t t)
(setq org-edit-src-content-indentation 0
      org-src-tab-acts-natively t
      org-src-fontify-natively t
      org-confirm-babel-evaluate nil
      org-support-shift-select 'always)

(org-babel-do-load-languages 'org-babel-load-languages
    '((emacs-lisp . t)
      (shell . t)
	  (ocaml . t)
	  (lisp . t)))

#+END_SRC

* Projects
Game development and animation and music production tools,
- [[nova.org][Nova]]
Game engine, written in Objective Caml.
- [[gamelike.org][Gamelike]]
Roguelike game inspired by Ragnarok Online and Shiren: The Wanderer.
- [[novapilot.org][Novapilot]]
2D game inspired by Bangai-O, Built in level editor.
- [[monsterpiece.org][Monsterpiece]]
2D game inspired by Mario Bros and Smash Bros and Metroid and Castlevania.
Single-room monster breed/fight/collect maze platform action.

* Cancelled Projects

** Mini Macs (hu-macs)
[[file:ectron.el][Emacs Electron]]
[[file:emacsript.el][Emacs ParenScript]]
Emacsript

** Erl-Dev
Erlang multiplayer game server. Supported IRC and other pieces. [[http://github.com/humasect/erl-dev]]

** hs-Nova
Haskell realtime 2D graphics and media engine. [[http://github.com/humasect/Nova]]
Website with documentation and tutorial is missing. ( [[http://hoovy.org]] )

** The Middle
Objective-C library for iOS and macOS for high performance
turtle-style graphics and game development for Emacs and Xcode.

** HaskellPlugin
http://github.com/humasect/HaskellPlugin
Plugin for Haskell for old version of Xcode.

* Programming

** Update Emacs
#+BEGIN_SRC shell :exports code
cd ~/src/emacs
git fetch
./configure --with-modules --with-x-toolkit=lucid
make
#+END_SRC

** git status
#+BEGIN_SRC shell :exports code
git status
#+END_SRC

** dropbox
#+BEGIN_SRC shell :exports code
dropbox start && dropbox status
#+END_SRC

* Communications

[[irc:/irc.freenode.net/#emacs][#emacs on freenode]]

* News
| [[https://news.ycombinator.com/][Hacker News]] | [[http://sachachua.com/blog/category/emacs/][Sacha Chua Emacs Blog]] |

* GitHub links
** C
[[https://github.com/eudoxia0/cmacro][cmacro]]
** Common Lisp
[[https://github.com/google/lisp-koans][Lisp Koans (from google)]]
[[http://notes.eatonphil.com/starting-a-minimal-common-lisp-project.html][Starting a Minimal Common Lisp Project]]
[[https://gist.github.com/chaitanyagupta/9324402][Common Lisp Reader Macros]]
[[https://github.com/janestreet/ecaml][Emacs plugin in OCaml]]
[[https://github.com/Shirakumo/trial][Shirakumo trial CL game engine]]
[[http://turtleware.eu/posts/cl-charms-crash-course.html][cl-charms CLIM backend FFI crash course]]
[[https://github.com/fukamachi/woo][woo webserver]]
** Gamedev
[[https://github.com/HackerTheory/first-light][psilord and mfiano's first-light game engine]]
[[http://www.roguebasin.com/index.php?title=Code_design_basics][Roguebasin code outline basics]]
[[https://github.com/rsaarelm/magog/][rsaaleim's magog RL in Rust]]
** Qabal
[[https://he.wikisource.org/wiki/%25D7%25A2%25D7%259E%25D7%2595%25D7%2593_%25D7%25A8%25D7%2590%25D7%25A9%25D7%2599][Wikipedia Hebrew]]
** People
[[https://en.wikipedia.org/wiki/George_Gurdjieff][George Gurdjieff]]
** Emacs
[[https://github.com/joaotavora/sly][Sly]]
[[https://www.youtube.com/watch?v=xqWkVvubnSI][Sly YT Video]]
[[https://joaotavora.github.io/sly/#A-SLY-tour-for-SLIME-users][Sly for Slime users]]
[[http://emacslife.com/emacs-chats/chat-iannis-zannos.html][Emacs and SuperCollider!]]
** Prolog
[[https://wps.aw.com/wps/media/objects/5771/5909832/PDF/Luger_0136070477_1.pdf][Logic programming PDF]]
