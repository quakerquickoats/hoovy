#+TITLE: Qabalah

* Letters
| Num | Value | Letter    |
|-----+-------+-----------|
|   1 |     1 | אלף       |
|   2 |     2 | בית       |
|   3 |     3 | גמל       |
|   4 |     4 | דלת       |
|   5 |     5 | הא        |
|   6 |     6 | וו        |
|   7 |     7 | זין       |
|   8 |     8 | חיט       |
|   9 |     9 | טיט       |
|  10 |    10 | יוד       |
|  11 |    20 | כף        |
|  12 |    30 | למד       |
|  13 |    40 | מים       |
|  14 |    50 | נון       |
|  15 |    60 | סמך       |
|  16 |    70 | עין       |
|  17 |    80 | פה        |
|  18 |    90 | צדי       |
|  19 |   100 | קוף       |
|  20 |   200 | ריש       |
|  21 |   300 | שין       |
|  22 |   400 | תו        |
|  23 |   500 | כף סופית  |
|  24 |   600 | מים סופית |
|  25 |   700 | נון סופית |
|  26 |   800 | פה סופית  |
|  27 |   900 | צדי סופית |
#+BEGIN_SRC emacs-lisp :lexical t
(defvar *qb-letters*
  '((aleph ALF ox)
    (bet   BYT house)
    (gimel GML camel)
    (dalet DLT door)
    (heh   HEH life-breath)
    (waw   WAW nail)
    (zayin ZYN sword)
    (xet   XET fence)
    (tet   TET undefined-snake?)
    (yod   YOD hand)
    (kaf   KAF cup)
    (lamed LMD chain)
    (mem   MEM water)
    (nun   NUN undefined)
    (samek SMK undefined)
    (ayin  AYN eye)
    (peh   PEH mouth)
    (chadi CHD undefined-righteous)
    (qof   QOF monkey)
    (resh  RES head)
    (shin  SIN tooth)
    (taw   TAW mark-cross)))

(defun qb-random-letter ()
  (elt *qb-letters* (random 22)))

(defconst *qb-otiyot*
  '(Alf Bet Gml Dal Heh Waw Zay Xet Tet Yod
    Kaf Lam Mem Nun Sam Iyn Peh Tza Qof Rsh Sin Tau))

(defconst *qb-sephirot*
  '(kexer hokama binae
	  hesed din xiperex-tifereth
	  necah hod yesod malkux))
#+END_SRC

* Gematria
#+BEGIN_SRC emacs-lisp
(defun qb-string-value (s)
  (let ((values '(
                  1 2 3 4 5 6 7 8 9
                  10 20 30 40 50 60 70 80 90
                  100 200 300 400 500 600 700 800 900)))
    (cl-flet ((letter-value (c)
                            (cdr (assoc c (mapcar* #'cons
                                                   ,*qb-alephbeth* values)))))
      (reduce #'+ (mapcar #'letter-value s)))))

#+END_SRC
* Generation and Randomization
#+BEGIN_SRC emacs-lisp :literate t
(defun random-elt (n l)
  )
(defun qb-random-string (len &optional alphabet)
  (cl-flet ((random-elt (l)
                        (loop repeat len collect (elt l (random (length l))))))
    (apply #'string
	       (random-elt (if alphabet alphabet *qb-alephbeth-nosof*)))))

(defun qb-english-letters-for-number (n))
(defun qb-hebrew-letters-for-number (n))

(defun qb-find-average-value (size count)
  "run COUNT tests and produce the average
   gematria value for lengths of SIZE.

   strange results; with size increasing and COUNT at 1000,
   1: 50 - 70
   2: 130 - 140
   3: ~200
   4: 270 - 280
   5: 330 - 340
   6: ~411
   7: ~470
   8: ~540
   9: ~608
   10: ~667

   so increasing by about 60 each new letter,
   does this account for 2x27 ??? but there are no sofit in that test.
   so maybe it accounts for 3x 22.
   "
  (let ((l (loop repeat count collect
                 (qb-string-value (qb-random-string size)))))
    (/ (reduce #'+ l) (length l))))

#+END_SRC
* Base-32
#+BEGIN_SRC emacs-lisp
;;
;; base32
;;

(defvar *qb-base32-en* "0123456789abcdefghijklmnopqrstuvwxyz") ;; מקח
(defvar *qb-base32-he* "0123456789אבגדהוזחטיכלמנסעפצקרשת")
#+END_SRC

* Keyboard Transliteration

| Letter | Keyboard |
|--------+----------|
| א      | t        |
| ב      | c        |
| ג      | f        |
| ד      | s        |
| ה      | v        |
| ו      | u        |
| ז      | z        |
| ח      | j        |
| ט      | y        |
| י      | h        |
| כ      | f        |
| ל      | k        |
| מ      | n        |
| נ      | b        |
| ס      | x        |
| ע      | g        |
| פ      | p        |
| צ      | m        |
| ק      | e        |
| ר      | r        |
| ש      | a        |
| ת      | ,        |

** Notes
These are straight keyboard mappings.

 qwertyuiop
 asdfghjkl;'
 zxcvbnm,./

׳קראטוןםפ
שדגכעיחלךף,
זסבהנמצתץ.


אבגדהוזחטיכלמנסעפצקרשת



These,

22-letter english for transliteration. (see *qb-transliteration* below)
    not sure if i like "e" and "u" for Heh and Waw, or "h" and "w".
    we could just have caps/uncaps modes. cant forget Final Otiyot anyhow.

abgdeuzx@iklmnsypcqr$t
אבגדהוזחטיכלמנסעפצקרשת

OR alternative, case-sensitive:
abjdeuzxTyklmnSopcgrst

hmm.
** Code
#+BEGIN_SRC emacs-lisp
(defconst *qb-key-alist*
  (let ((e "qwertyuiopasdfghjkl;'zxcvbnm,./")
	(h "/'קראטוןםפשדגכעיחלךף,זסבהנמצתץ."))
    (mapcar* #'cons e h)))

(defconst *qb-alphabet* "abcdefghijklmnopqrstuvwxyz")
(defconst *qb-alephbeth-nosof*
  (string ?\x05D0 ?\x05D1 ?\x05D2 ?\x05D3 ?\x05D4 ?\x05D5 ?\x05D6 ?\x05D7 ?\x05D8 ?\x05D9
	      ?\x05DB ?\x05DC ?\x05DE ?\x05E0 ?\x05E1 ?\x05E2 ?\x05E4 ?\x05E6
	      ?\x05E7 ?\x05E8 ?\x05E9 ?\x05EA))
(defconst *qb-alephbeth*
  (concat *qb-alephbeth-nosof*
          ;; no final letter (sofit)
          (string ?\x05DA ?\x05DD ?\x05DF ?\x05E3 ?\x05E5)))

(defconst *qb-transliteration* "ABGDHWZX@IKLMNS&PCQR$T")

(defun qb-english-char-to-hebrew (c)
  (apply #'string
         (seq-elt *qb-transliteration* (seq-position *qb-alphabet* c))))

(defun qb-transliterate-english (s) (seq-map #'qb-english-char-to-hebrew s))
(defun qb-transliterate-hebrew (s) (seq-map #'qb-hebrew-char-to-english s))

(defconst *qb-geresh* ?\x05F3)
(defconst *qb-gershaym* ?\x05F4)
#+END_SRC
* Book Loading
#+BEGIN_SRC emacs-lisp :lexical t
(defun qb-string-for-book (book)
  (pcase book
    ((or 'genesis 'bereshit) "Genesis")
    ('exodus "Exodus")
    ('leviticus "Leviticus")
    ('numbers "Numbers")
    ('deuteronomy "Deuteronomy")))

(defvar *qb-path* "~/Downloads/Tanakh")
(defun qb-book-path (book)
  (make-directory *qb-path* t)
  (concat *qb-path* "/" book ".con.txt"))

(defun qb-read-book (book)
  (with-temp-buffer
    (insert-file-contents (qb-book-path book))
    (read (current-buffer))))

(defun qb-load-book (book)
  (if (file-exists-p (qb-book-path book))
      (qb-read-book book)
    (qb-download-book book)))
#+END_SRC
** XML Text Parsing
#+BEGIN_SRC emacs-lisp

(defun qb--convert-xml (xml)
  (let ((contents (caddr (cadddr xml)) ))
    contents)  )

(defun qb-download-book (book)
  (url-copy-file (concat "https://tanach.us/Server.xml?" book "*" ;;"*&content=Consonants"
			 )
		 (qb-book-path book))
  (with-temp-buffer
    (insert-file-contents (qb-book-path book))
    (let ((xml (xml-to-esxml (buffer-string))))
      (qb--convert-xml xml)

      ;; (with-temp-file (qb-book-path book)
      ;; 	(prin1 xml))
      )))

(defvar *qb-torah*
  `(:genesis ,(qb-download-book "Genesis")))

(defun qb-get-verse (book number)
  (with-temp-buffer
    (insert-file-contents (qb-book-path book))
    (let ((x (thing-at-point 'word t)))
      (while x
	(pcase x
	  ("xxxx" ignore)))

      (while (and x (not (eql (thing-at-point 'word t) "xxxx")))
	(forward-line)
	(setq x (thing-at-point 'word t)))
      x)))
#+END_SRC

** Uncode Text Parsing
#+BEGIN_SRC emacs-lisp :lexical t
#+END_SRC
