#+TITLE: humasect emacs configuration

* Init
#+BEGIN_SRC emacs-lisp
(defgroup hoovy nil
  "Hoovy Customization Group"
  :link '(custom-manual "(hoovy)Top"))

(defcustom hoovy-root "~/hoovy"
  "Root Path"
  :type 'directory
  :group 'hoovy)

(defcustom hoovy-apps '(("Krita" . "~/Downloads/krita"))
  "List of Applications"
  :type '(alist :key-type string :value-type file)
  :group 'hoovy)

#+END_SRC

* Startup
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/site-lisp")
(server-start)
(require 'exwm)
(require 'exwm-config)
;;(exwm-config-ido)
(exwm-config-default)
(exwm-enable-ido-workaround)
(setq exwm-workspace-number 4)

(setq mouse-autoselect-window nil)   ;; can't use with exwm
;;(setq mouse-wheel-scroll-amount '(1 ((shift) . 1) ((control) . nil)))
;;(setq mouse-wheel-progressive-speed nil)

#+END_SRC

* Packages
#+BEGIN_SRC emacs-lisp
(add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/"))
;;(add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/))"))

(defun packages ()
  (interactive)
  (package-list-packages nil)
  (hl-line-mode))
#+END_SRC

* Display
#+BEGIN_SRC emacs-lisp
(menu-bar-mode nil)
(scroll-bar-mode nil)
(tool-bar-mode nil)
(setq visible-bell t)
(show-paren-mode t)

(setq ibuffer-saved-filter-groups
      '(("default"
	 ("Emacs" (name . "^\\*"))
	 ("Dired" (mode . dired-mode)))))
#+END_SRC

* Workspace
#+BEGIN_SRC emacs-lisp
(set-language-environment "UTF-8")
(set-default-coding-systems 'utf-8)

;;(require 'ido)
;;(ido-mode t)
(require 'helm)
(require 'helm-config)
(helm-mode 1)
(global-set-key (kbd "M-x") 'helm-M-x)
(global-set-key (kbd "M-y") 'helm-show-kill-ring)
(global-set-key (kbd "C-x b") 'helm-mini)
(global-set-key (kbd "C-x C-f") 'helm-find-files)
(global-set-key (kbd "C-c h") 'helm-command-prefix)
(global-unset-key (kbd "C-x c"))
(global-set-key (kbd "C-h SPC") 'helm-all-mark-rings)
(global-set-key (kbd "C-c h x") 'helm-register)
(global-set-key (kbd "C-c h g") 'helm-google-suggest)
(global-set-key (kbd "C-c h M-:") 'helm-eval-expression-with-eldoc)
;;(define-key minibuffer-local-map (kbd "C-c C-l") 'helm-minibuffer-history)

(require 'helm-eshell)
(add-hook 'eshell-mode-hook
          #'(lambda ()
              (define-key eshell-mode-map (kbd "C-c C-l")  'helm-eshell-history)))

;;(setq helm-M-x-fuzzy-match t) ;; optional fuzzy matching for helm-M-x
;; (setq helm-buffers-fuzzy-matching t
;;       helm-recentf-fuzzy-match    t)
;; (setq helm-semantic-fuzzy-match t
;;       helm-imenu-fuzzy-match    t)

(defun hoovy-insert-date ()
  (interactive)
  (insert (format-time-string "%Y-%m-%d")))
#+END_SRC

* Org Mode
#+BEGIN_SRC emacs-lisp

(defun hoovy-www () (concat hoovy-root "/www/"))
(setq org-default-notes-file (concat hoovy-root "/notes.org"))

(define-key global-map (kbd "C-c c") 'org-capture)

;; (defun hv-make-notes (&optional name)
;;   `(,(concat name "-notes")
;;    :base-directory ,(concat hv-root "/" name "/org")
;;    :base-extension "org"
;;    :publishing-function org-publish-org-to-html
;;    :publishing-directory ,(concat hv-www "/dev/" name)
;;    :auto-sitemap t
;;    :sitemap-title "/Site Map/"
;;    :sitemap-alphabetically nil
;;    :recursive t
;;    :style-include-default t
;;    :headline-levels 4
;;    :auto-preamble t))

;; (defun hv-make-static (&optional name)
;;   `(,(concat name "-static")
;;     :base-directory ,(concat hv-root "/" name "/org")
;;     :base-extension "css\\|js\\|png\\|gif\\|pdf\\|mp3\\|ogg\\|svg"
;;     :publishing-function org-publish-attachment
;;     :publishing-directory ,(concat hv-www "/dev/" name)
;;     :recursive t))

;; (setq org-capture-templates
;;       '(("t" "Todo" entry (file+headline "" "Tasks")
;;          "* TODO %?\n  %i\n  %a")
;;         ("j" "Journal" entry (file+datetree "")
;;          "* %?\nEntered on %U\n  %i\n  %a")))

(setq org-publish-project-alist
      `(("hoovy"
	 :base-directory ,hoovy-root
	 :recursive t
	 :publishing-directory ,(hoovy-www)
	 :publishing-function org-html-publish-to-html
	 :html-head-extra ""
	 :components ())))

(org-display-inline-images t t)
(setq org-edit-src-content-indentation 0
      org-src-tab-acts-natively t
      org-src-fontify-natively t
      org-confirm-babel-evaluate nil
      org-support-shift-select 'always)

(org-babel-do-load-languages 'org-babel-load-languages
    '((emacs-lisp . t)
      (shell . t)))

#+END_SRC
* Comminucations
#+BEGIN_SRC emacs-lisp

(setq browse-url-browser-function 'eww-browse-url)

;; shouldnt really be here, but in user config
(setq erc-autojoin-channels-alist
      '(("freenode.net" "#clim" "#lispgames" "#lisp" "#emacs")
	("quakenet" "#rgrd")
	("efnet" "#buddhism")
	("undernet" "#buddhism"))
      erc-fill-column 80
      erc-hide-timestamps t
      erc-nick "whoman")

(require 'elfeed)
(setq elfeed-feeds
      '("https://news.ycombinator.com/rss"
        "http://planet.emacsen.org/atom.xml"))

(require 'emms-setup)
(emms-standard)
(emms-default-players)
#+END_SRC

* Prolog
#+BEGIN_SRC emacs-lisp
(require 'ediprolog)
(global-set-key "\C-c\C-e" 'ediprolog-dwim)
(add-to-list 'auto-mode-alist '("\\.pl?$" . prolog-mode))
#+END_SRC

* Erlang
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "/usr/lib/erlang/tools-2.10.1/emacs")
(setq erlang-root-path "/usr/lib/erlang")
(add-to-list 'exec-path "/usr/lib/erlang/bin")

(add-to-list 'load-path "~/Downloads/distel/elisp")
(require 'distel)
(distel-setup)

(defvar inferior-erlang-prompt-timeout t)
(setq inferior-erlang-machine-options '("-sname" "emacs"))
(setq erl-nodename-cache
      (make-symbol (concat "emacs@"
			   (car (split-string
				 (shell-command-to-string "hostname"))))))

;; (cl-flet ((erlpath (x) (concat x "/Program Files/erl9.0/")))
;;   (add-to-list 'load-path (erlpath "/lib/tools-2.10/emacs"))
;;   (setq erlang-root-dir (erlpath "/erts-9.0"))
;;   (add-to-list 'exec-path (erlpath "/erts-9.0/bin"))
;;   (setq erlang-man-root-dir (erlpath "/erts-9.0/man")))

(defun my-erlang-mode-hook ()
        ;; when starting an Erlang shell in Emacs, default in the node name
        (setq inferior-erlang-machine-options '("-sname" "emacs"))
        ;; add Erlang functions to an imenu menu
        (imenu-add-to-menubar "imenu")
        ;; customize keys
        (local-set-key [return] 'newline-and-indent))

;; Some Erlang customizations
(add-hook 'erlang-mode-hook 'my-erlang-mode-hook)

(require 'erlang-start)

;; (add-to-list 'auto-mode-alist '("\\.erl?$" . erlang-mode))
;; (add-to-list 'auto-mode-alist '("\\.hrl?$" . erlang-mode))

;;(erlang-indent-level 4)
#+END_SRC

* Lisp
#+BEGIN_SRC emacs-lisp
(require 'cl)

(defun slime-style-init-command (port-filename _coding-system extra-args)
  "Return a string to initialize Lisp."
  (let ((loader (if (file-name-absolute-p slime-backend)
                    slime-backend
                  (concat slime-path slime-backend))))
    ;; Return a single form to avoid problems with buffered input.
    (format "%S\n\n"
            `(progn
               (load ,(slime-to-lisp-filename (expand-file-name loader))
                     :verbose t)
               (funcall (read-from-string "swank-loader:init"))
               (funcall (read-from-string "swank:start-server")
                        ,(slime-to-lisp-filename port-filename)
			,@extra-args)))))

(defun slime-style (&optional style)
  (interactive
   (list (intern-soft (read-from-minibuffer "Style: " "nil"))))
  (lexical-let ((style style))
    (slime-start
     :init (lambda (x y)
	     (slime-style-init-command
	      x y `(:style ,style :dont-close t))))))

(setq inferior-lisp-program "sbcl")
(setq slime-lisp-implementations
      '((sbcl ("/usr/local/bin/sbcl"))
	(ecl ("/usr/local/bin/ecl"))
	(nova ("~/nova/nova"))))

;(require 'slime-autoloads)
(load "~/quicklisp/slime-helper.el")
(setq slime-auto-connect 'ask)
(slime-setup '(slime-fancy slime-mrepl slime-banner slime-tramp
			   slime-xref-browser slime-highlight-edits
			   slime-sprof slime-asdf slime-company))
(setq common-lisp-hyperspec-root "file:///Users/Quaker/Downloads/HyperSpec/")
(global-set-key "\C-cs" 'slime-selector)
(setf slime-scratch-file "~/hoovy/scratch.lisp")

;; (defun my-slime-setup ()
;;   (require 'slime)
;;   (slime-setup))

;; (defvar my--slime-setup-done nil)
;; (defun my-slime-setup-once ()
;;   (unless my--slime-setup-done
;;     (my-slime-setup)
;;     (setq my--slime-setup-done t)))
;; (defadvice lisp-mode (before my-slime-setup-once activate)
;;   (my-slime-setup-once))


(autoload 'enable-paredit-mode "paredit"
  "Turn on pseudo-structural editing of Lisp code." t)

(autoload 'snoopy-mode "snoopy"
    "Turn on unshifted mode for characters in the keyboard number row."
    t)

;; (macrolet ((fn (&body body)
;; 	       `(lambda (_) (print ,@body " ----"))))
;;   (mapc fn '(1 2 3 4)))

(let ((modes-to-hook '(emacs-lisp-mode-hook
		       eval-expression-minibuffer-setup-hook
		       ielm-mode-hook
		       lisp-mode-hook
		       lisp-interaction-mode-hook
		       scheme-mode-hook)))
  (mapc (lambda (a)
	  (add-hook a 'snoopy-mode)
	  (add-hook a #'enable-paredit-mode))
	modes-to-hook))

;;(add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
;;(add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
;;(add-hook 'ielm-mode-hook 'turn-on-eldoc-mode)

;; (add-hook 'emacs-lisp-mode-hook (lambda () (lispy-mode 1)))
;; (add-hook 'lisp-mode-hook (lambda () (lispy-mode 1)))

;; (mapc (lambda (x)
;; 	(add-hook (quote x) (lambda () (lispy-mode))))
;;       '(emacs-lisp-mode-hook))


(require 'redshank-loader "~/.emacs.d/site-lisp/redshank/redshank-loader")
(eval-after-load "redshank-loader"
  `(redshank-setup '(lisp-mode-hook
		     slime-repl-mode-hook
		     ielm-mode-hook
		     emacs-lisp-mode-hook) t))
#+END_SRC
