#+TITLE: humasect emacs configuration

* Startup
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/site-lisp")
  (server-start)
  (require 'exwm)
  (require 'exwm-config)
  ;;(exwm-config-ido)
  (exwm-config-default)
  (exwm-enable-ido-workaround)
  (setq exwm-workspace-number 4)

  (setq mouse-autoselect-window nil)   ;; can't use with exwm
  ;;(setq mouse-wheel-scroll-amount '(1 ((shift) . 1) ((control) . nil)))
  ;;(setq mouse-wheel-progressive-speed nil)

  (windmove-default-keybindings)
  ;;(global-hl-line-mode 1)
  ;; (and
  ;;   (require 'centered-cursor-mode)
  ;;   (global-centered-cursor-mode 1))

#+END_SRC

* Packages
#+BEGIN_SRC emacs-lisp
(add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
;;(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/"))
;;(add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/))"))

(defun packages ()
  (interactive)
  (package-list-packages nil)
  (hl-line-mode))
#+END_SRC

* Display
#+BEGIN_SRC emacs-lisp
(menu-bar-mode nil)
(scroll-bar-mode nil)
(tool-bar-mode nil)
(setq visible-bell t)
(show-paren-mode t)

(setq ibuffer-saved-filter-groups
      '(("default"
	 ("Emacs" (name . "^\\*"))
	 ("Dired" (mode . dired-mode)))))
#+END_SRC

* Workspace
#+BEGIN_SRC emacs-lisp
(require 'persistent-scratch)
(setq persistent-scratch-autosave-interval (* 60 10))
(persistent-scratch-autosave-mode)

  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)

  (setq prettify-symbols-alist
		'(
		  ("lambda" . 955) ; λ
		  ("->" . 8594)    ; →
		  ("=>" . 8658)    ; ⇒
		  ;;("map" . 8614)    ; ↦
		  ("asdf" . "b")
		  ))

  ;;(global-prettify-symbols-mode 1)

  (require 'ido)
  (ido-mode t)

  ;; (require 'helm)
  ;; (require 'helm-config)
  ;; (helm-mode 1)
  ;; (global-set-key (kbd "M-x") 'helm-M-x)
  ;; (global-set-key (kbd "M-y") 'helm-show-kill-ring)
  ;; (global-set-key (kbd "C-x b") 'helm-mini)
  ;; (global-set-key (kbd "C-x C-f") 'helm-find-files)
  ;; (global-set-key (kbd "C-c h") 'helm-command-prefix)
  ;; (global-unset-key (kbd "C-x c"))
  ;; (global-set-key (kbd "C-h SPC") 'helm-all-mark-rings)
  ;; (global-set-key (kbd "C-c h x") 'helm-register)
  ;; (global-set-key (kbd "C-c h g") 'helm-google-suggest)
  ;; (global-set-key (kbd "C-c h M-:") 'helm-eval-expression-with-eldoc)
  ;; ;;(define-key minibuffer-local-map (kbd "C-c C-l") 'helm-minibuffer-history)

  ;; (require 'helm-eshell)
  ;; (add-hook 'eshell-mode-hook
  ;;           #'(lambda ()
  ;;               (define-key eshell-mode-map (kbd "C-c C-l")  'helm-eshell-history)))

  ;;(setq helm-M-x-fuzzy-match t) ;; optional fuzzy matching for helm-M-x
  ;; (setq helm-buffers-fuzzy-matching t
  ;;       helm-recentf-fuzzy-match    t)
  ;; (setq helm-semantic-fuzzy-match t
  ;;       helm-imenu-fuzzy-match    t)

  (defun hoovy-insert-date ()
	(interactive)
	(insert (format-time-string "%Y-%m-%d")))
#+END_SRC


* Communications
#+BEGIN_SRC emacs-lisp

  (setq browse-url-browser-function 'eww-browse-url)

  ;; shouldnt really be here, but in user config
  (setq erc-autojoin-channels-alist
		'(("freenode.net" "#clim" "#lispgames" "#lisp" "#emacs" "#GNUstep" "#ocaml" "#erlang")
	  ("quakenet" "#rgrd")
	  ("efnet" "#buddhism")
	  ("undernet" "#buddhism"))
		erc-fill-column 80
		erc-hide-timestamps t
		erc-nick "whoman")

  (require 'elfeed)
  (setq elfeed-feeds
		'("https://news.ycombinator.com/rss"
		  "http://planet.emacsen.org/atom.xml"))

  ;; (require 'emms-setup)
  ;; (emms-standard)
  ;; (emms-default-players)
#+END_SRC


* Objective CAML
#+BEGIN_SRC emacs-lisp
;; ## added by OPAM user-setup for emacs / base ## 56ab50dc8996d2bb95e7856a6eddb17b ## you can edit, but keep this line
(require 'opam-user-setup "~/.emacs.d/opam-user-setup.el")
;; ## end of OPAM user-setup addition for emacs / base ## keep this line
#+END_SRC

* Prolog
#+BEGIN_SRC emacs-lisp
(require 'ediprolog)
(global-set-key "\C-c\C-e" 'ediprolog-dwim)
(add-to-list 'auto-mode-alist '("\\.pl?$" . prolog-mode))
#+END_SRC

* Erlang
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "/usr/lib/erlang/tools-2.10.1/emacs")
(setq erlang-root-path "/usr/lib/erlang")
(add-to-list 'exec-path "/usr/lib/erlang/bin")

(add-to-list 'load-path "~/Downloads/distel/elisp")
(require 'distel)
(distel-setup)

(defvar inferior-erlang-prompt-timeout t)
(setq inferior-erlang-machine-options '("-sname" "emacs"))
(setq erl-nodename-cache
      (make-symbol (concat "emacs@"
			   (car (split-string
				 (shell-command-to-string "hostname"))))))

;; (cl-flet ((erlpath (x) (concat x "/Program Files/erl9.0/")))
;;   (add-to-list 'load-path (erlpath "/lib/tools-2.10/emacs"))
;;   (setq erlang-root-dir (erlpath "/erts-9.0"))
;;   (add-to-list 'exec-path (erlpath "/erts-9.0/bin"))
;;   (setq erlang-man-root-dir (erlpath "/erts-9.0/man")))

(defun my-erlang-mode-hook ()
        ;; when starting an Erlang shell in Emacs, default in the node name
        (setq inferior-erlang-machine-options '("-sname" "emacs"))
        ;; add Erlang functions to an imenu menu
        (imenu-add-to-menubar "imenu")
        ;; customize keys
        (local-set-key [return] 'newline-and-indent))

;; Some Erlang customizations
(add-hook 'erlang-mode-hook 'my-erlang-mode-hook)

(require 'erlang-start)

;; (add-to-list 'auto-mode-alist '("\\.erl?$" . erlang-mode))
;; (add-to-list 'auto-mode-alist '("\\.hrl?$" . erlang-mode))

;;(erlang-indent-level 4)
#+END_SRC

* Lisp
#+BEGIN_SRC emacs-lisp
(require 'cl)

(defun slime-style-init-command (port-filename _coding-system extra-args)
  "Return a string to initialize Lisp."
  (let ((loader (if (file-name-absolute-p slime-backend)
                    slime-backend
                  (concat slime-path slime-backend))))
    ;; Return a single form to avoid problems with buffered input.
    (format "%S\n\n"
            `(progn
               (load ,(slime-to-lisp-filename (expand-file-name loader))
                     :verbose t)
               (funcall (read-from-string "swank-loader:init"))
               (funcall (read-from-string "swank:start-server")
                        ,(slime-to-lisp-filename port-filename)
			,@extra-args)))))

(defun slime-style (&optional style)
  (interactive
   (list (intern-soft (read-from-minibuffer "Style: " "nil"))))
  (lexical-let ((style style))
    (slime-start
     :init (lambda (x y)
	     (slime-style-init-command
	      x y `(:style ,style :dont-close t))))))

(setq inferior-lisp-program "sbcl")
(setq slime-lisp-implementations
      '((sbcl ("/usr/local/bin/sbcl"))
	(ecl ("/usr/local/bin/ecl"))
	(nova ("~/nova/nova"))))

;(require 'slime-autoloads)
(load "~/quicklisp/slime-helper.el")
(setq slime-auto-connect 'ask)
(slime-setup '(slime-fancy slime-mrepl slime-banner slime-tramp
			   slime-xref-browser slime-highlight-edits
			   slime-sprof slime-asdf slime-company))
(setq common-lisp-hyperspec-root "file:///home/lyndon/Downloads/HyperSpec/")
(global-set-key "\C-cs" 'slime-selector)
(setf slime-scratch-file "~/hoovy/scratch.lisp")

;; (defun my-slime-setup ()
;;   (require 'slime)
;;   (slime-setup))

;; (defvar my--slime-setup-done nil)
;; (defun my-slime-setup-once ()
;;   (unless my--slime-setup-done
;;     (my-slime-setup)
;;     (setq my--slime-setup-done t)))
;; (defadvice lisp-mode (before my-slime-setup-once activate)
;;   (my-slime-setup-once))


(autoload 'enable-paredit-mode "paredit"
  "Turn on pseudo-structural editing of Lisp code." t)

(autoload 'snoopy-mode "snoopy"
    "Turn on unshifted mode for characters in the keyboard number row."
    t)

;; (macrolet ((fn (&body body)
;; 	       `(lambda (_) (print ,@body " ----"))))
;;   (mapc fn '(1 2 3 4)))

(let ((modes-to-hook '(emacs-lisp-mode-hook
		       eval-expression-minibuffer-setup-hook
		       ielm-mode-hook
		       lisp-mode-hook
		       lisp-interaction-mode-hook
		       scheme-mode-hook)))
  (mapc (lambda (a)
	  (add-hook a 'snoopy-mode)
	  (add-hook a #'enable-paredit-mode))
	modes-to-hook))

;;(add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
;;(add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
;;(add-hook 'ielm-mode-hook 'turn-on-eldoc-mode)

;; (add-hook 'emacs-lisp-mode-hook (lambda () (lispy-mode 1)))
;; (add-hook 'lisp-mode-hook (lambda () (lispy-mode 1)))

;; (mapc (lambda (x)
;; 	(add-hook (quote x) (lambda () (lispy-mode))))
;;       '(emacs-lisp-mode-hook))


(require 'redshank-loader "~/.emacs.d/site-lisp/redshank/redshank-loader")
(eval-after-load "redshank-loader"
  `(redshank-setup '(lisp-mode-hook
		     slime-repl-mode-hook
		     ielm-mode-hook
		     emacs-lisp-mode-hook) t))
#+END_SRC

* Hoovy
#+BEGIN_SRC emacs-lisp
(org-babel-load-file (concat "~/hoovy/hoovy.org")) ;; FIXME: use hoovy-root
#+END_SRC

